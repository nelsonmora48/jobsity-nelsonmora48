{"version":3,"sources":["ChatBoard.js","Rooms.js","serviceWorker.js","index.js"],"names":["ChatBoard","props","io","actualRoom","setActualRoom","useState","queue","setQueue","payload","setPayload","useEffect","socket","get","on","data","oldData","handleMessageReceived","off","map","k","key","user","onSubmit","e","preventDefault","type","name","value","onChange","target","focus","onClick","sailsIOClient","socketIOClient","Rooms","rooms","setRooms","handleJoin","d","className","colSpan","sails","url","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iRAQe,SAASA,EAAUC,GAAQ,IAChCC,EAAkCD,EAAlCC,GAAIC,EAA8BF,EAA9BE,WAAYC,EAAkBH,EAAlBG,cADe,EAEbC,mBAAS,IAFI,mBAEhCC,EAFgC,KAEzBC,EAFyB,OAGTF,mBAAS,IAHA,mBAGhCG,EAHgC,KAGvBC,EAHuB,KAkCvC,OAPAC,qBAAU,WAIR,OAHAR,EAAGS,OAAOC,IAAI,UACdV,EAAGS,OAAOE,GAAG,WAAW,SAACC,GAAD,OANI,SAACA,GAC7BP,GAAS,SAACQ,GAAD,4BAAiBA,GAAjB,YAA6BD,OAKJE,CAAsBF,MACxDP,EAAS,IACD,kBAAML,EAAGS,OAAOM,IAAI,cAC3B,CAACd,IAGF,oCACE,+BACE,+BACE,4BACE,yCAAeA,IAEhBG,EAAMY,KAAI,SAACJ,EAAMK,GAAP,OACT,wBAAIC,IAAKD,GACP,4BAAI,2BAAIL,EAAKO,KAAT,MAAJ,IAA0BP,EAAKN,aAGnC,4BACE,4BACE,0BAAMc,SAtCG,SAACC,GACpBA,EAAEC,iBACFtB,EAAGS,OAAOC,IAAI,WAAY,CAAEJ,QAASA,IACrCC,EAAW,MAoCC,2BACEgB,KAAK,OACLC,KAAK,gBACLC,MAAOnB,EACPoB,SAhDM,SAACL,GACrBd,EAAWc,EAAEM,OAAOF,OACpBJ,EAAEM,OAAOC,WAgDG,2BAAOL,KAAK,SAASE,MAAM,YAIjC,4BACE,4BACE,4BAAQI,QA7CI,SAACR,GACvBrB,EAAGS,OAAOC,IAAI,SAAU,CAAEJ,QAASA,IACnCC,EAAW,IACXF,GAAS,SAACQ,GAAD,MAAa,MACtBX,EAAc,MAyCJ,mB,6BC/DVF,E,MAAK8B,GAAcC,KAGR,SAASC,IAAS,IAAD,EACJ7B,mBAAS,IADL,mBACvB8B,EADuB,KAChBC,EADgB,OAEM/B,mBAAS,IAFf,mBAEvBF,EAFuB,KAEXC,EAFW,KASxBiC,EAAa,SAACC,GAClBpC,EAAGS,OAAOC,IAAI,SAAW0B,EAAET,OAAOH,MAClCtB,EAAckC,EAAET,OAAOH,OAQzB,OALAhB,qBAAU,WACRR,EAAGS,OAAOC,IAAI,UACdV,EAAGS,OAAOE,GAAG,SAAS,SAACC,GAAD,OAAUsB,EAAStB,QACxC,IAGD,oCACE,yBAAKyB,UAAU,YACb,yBAAKA,UAAU,eACb,+BACE,+BACE,4BACE,wBAAIC,QAAS,GAAb,gBAEDL,EAAMjB,KAAI,SAACJ,EAAMK,GAAP,OACT,wBAAIC,IAAKD,GACP,4BAAKL,GACL,4BACE,4BAAQY,KAAMZ,EAAMiB,QAASM,GAA7B,cAOR,+BACE,4BACE,4BACE,4BAAQN,QAtCF,SAACR,GACrBrB,EAAGS,OAAOC,IAAI,eACdR,EAAc,MAoCA,aAEF,iCAKR,yBAAKmC,UAAU,eACG,KAAfpC,GACC,kBAACH,EAAD,CACEE,GAAIA,EACJC,WAAYA,EACZC,cAAeA,OAxD7BF,EAAGuC,MAAMC,IAAM,wBCKKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAChB,EAAD,OAEFiB,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0c6062ad.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n// import socketIOClient from \"socket.io-client\";\n// import sailsIOClient from \"sails.io.js\";\n\n// var io = sailsIOClient(socketIOClient);\n// io.sails.url = \"http://localhost:1337\";\n\nexport default function ChatBoard(props) {\n  const { io, actualRoom, setActualRoom } = props;\n  const [queue, setQueue] = useState([]);\n  const [payload, setPayload] = useState(\"\");\n\n  const handleMessage = (e) => {\n    setPayload(e.target.value);\n    e.target.focus();\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    io.socket.get(\"/message\", { payload: payload });\n    setPayload(\"\");\n  };\n\n  const handleLeaveRoom = (e) => {\n    io.socket.get(\"/leave\", { payload: payload });\n    setPayload(\"\");\n    setQueue((oldData) => []);\n    setActualRoom(\"\")\n  };\n\n  const handleMessageReceived = (data) => {\n    setQueue((oldData) => [...oldData, ...data]);\n  };\n\n  useEffect(() => {\n    io.socket.get(\"/rooms\");\n    io.socket.on(\"message\", (data) => handleMessageReceived(data));\n    setQueue([]);\n    return (() => io.socket.off(\"message\"))\n  }, [actualRoom]);\n\n  return (\n    <>\n      <table>\n        <tbody>\n          <tr>\n            <th>Messages: {actualRoom}</th>\n          </tr>\n          {queue.map((data, k) => (\n            <tr key={k}>\n              <td><b>{data.user}: </b> {data.payload}</td>\n            </tr>\n          ))}\n          <tr>\n            <td>\n              <form onSubmit={handleSubmit}>\n                <input\n                  type=\"text\"\n                  name=\"message_input\"\n                  value={payload}\n                  onChange={handleMessage}\n                ></input>\n                <input type=\"submit\" value=\"Send\" />\n              </form>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <button onClick={handleLeaveRoom}>Leave Room</button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport ChatBoard from \"./ChatBoard\";\nimport socketIOClient from \"socket.io-client\";\nimport sailsIOClient from \"sails.io.js\";\n\nvar io = sailsIOClient(socketIOClient);\nio.sails.url = \"http://localhost:1337\";\n\nexport default function Rooms() {\n  const [rooms, setRooms] = useState([]);\n  const [actualRoom, setActualRoom] = useState(\"\");\n\n  const handleNewRoom = (e) => {\n    io.socket.get(\"/roomCreate\");\n    setActualRoom(\"\");\n  };\n\n  const handleJoin = (d) => {\n    io.socket.get(\"/join/\" + d.target.name);\n    setActualRoom(d.target.name);\n  };\n\n  useEffect(() => {\n    io.socket.get(\"/rooms\");\n    io.socket.on(\"rooms\", (data) => setRooms(data));\n  }, []);\n\n  return (\n    <>\n      <div className='rowstyle'>\n        <div className='columnstyle'>\n          <table>\n            <tbody>\n              <tr>\n                <th colSpan={2}>Chat Rooms:</th>\n              </tr>\n              {rooms.map((data, k) => (\n                <tr key={k}>\n                  <td>{data}</td>\n                  <td>\n                    <button name={data} onClick={handleJoin}>\n                      Join\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n            <tfoot>\n              <tr>\n                <td>\n                  <button onClick={handleNewRoom}>New Room</button>\n                </td>\n                <td></td>\n              </tr>\n            </tfoot>\n          </table>\n        </div>\n        <div className=\"columnstyle\">\n          {actualRoom !== \"\" && (\n            <ChatBoard\n              io={io}\n              actualRoom={actualRoom}\n              setActualRoom={setActualRoom}\n            />\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Rooms from './Rooms'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Rooms /> \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}